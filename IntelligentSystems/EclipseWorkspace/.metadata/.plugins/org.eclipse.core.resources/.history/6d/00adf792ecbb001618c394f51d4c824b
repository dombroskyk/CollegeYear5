import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;

import jAudioFeatureExtractor.AudioFeatures.MFCC;
import jAudioFeatureExtractor.AudioFeatures.MagnitudeSpectrum;
import jAudioFeatureExtractor.jAudioTools.AudioSamples;

public class FeatureExtraction {
	
	public static void main(String[] args){
		
		final double SAMPLE_DURATION = 10.0d;
		
		if( args.length == 0 ){
			System.err.println( "Please supply the local path to audio files to train on" );
			System.exit(1);
		}
		// filter non .wav files
		
		//AudioSamples[] audioSamples = new AudioSamples[args.length - 1];
		for( int i = 0; i < args.length; i++ ){
			String uid = args[i].substring(0, args[i].length()-4);
			File inputFile = new File(args[i]);
			AudioSamples audioSample;
			double[][] samples;
			try{
				AudioInputStream inputStream = AudioSystem.getAudioInputStream(inputFile);
				audioSample = new AudioSamples(inputStream, uid, false);
				samples = audioSample.getSampleWindowsMixedDown(SAMPLE_DURATION);
			} catch(Exception e){
				audioSample = null;
				samples = null;
				e.printStackTrace();
				System.exit(2);
			}
			
			double sampleRate = audioSample.getSamplingRateAsDouble();
			for( double[] sample : samples ){
				MagnitudeSpectrum currMagSpec = new MagnitudeSpectrum();
				MFCC currMFCC = new MFCC();
				System.out.println(currMFCC.getDepenedencyOffsets());
				try{
					double[] magSpecSamples = currMagSpec.extractFeature(sample, sampleRate, null);
					double[] mfccSamples = currMFCC.extractFeature(magSpecSamples, samplingRate, null)
				} catch(Exception e){
					e.printStackTrace();
					System.exit(3);
				}
			}
		}
		
		
		
	}
	
}
