
public class DTreeNode {

	private double[][] inEn;
	private double[][] inEs;
	private double[][] inPl;
	private double total;
	
	public DTreeNode(double[][] inEn, double[][] inEs, double[][] inPl, boolean[] attrAvailable, double[] max, double[] min){
		this.inEn = inEn;
		this.inEs = inEs;
		this.inPl = inPl;
		this.total = inEn.length + inEs.length + inPl.length;
		this.max = max;
		this.min = min;
	}
	
	public double preEntropy(){
		return this.entropyPart((double)this.inEn.length / this.total) +
				this.entropyPart((double)this.inEs.length / this.total) +
				this.entropyPart((double)this.inPl.length / this.total);
	}
	
	private double entropyPart(double frac){
		return -frac * this.log2Calc(frac);
	} 
	
	private double log2Calc(double frac){
		return Math.log10(-frac) / Math.log10(2.0d); 
	}
	
	public void chooseBranch(){
		double[] postEntropy = new double[13];
		for(int i=0; i < 13; i++){
			
		}
	}
	
}
